<!DOCTYPE html>
<html>
<head>
<meta content='text/html; charset=utf-8' http-equiv='Content-Type'>
<meta name="csrf-param" content="authenticity_token"/>
<meta name="csrf-token" content="ng5dkB7OKRjFLWZrH56zxkOhqZsBx/nL26lRA8PJh00="/>
<title>Swagger: A simple, open standard for describing REST APIs with JSON</title>
<link href='/favicon.png' rel='shortcut icon'>
<link href='http://fonts.googleapis.com/css?family=Droid+Sans:400,700' rel='stylesheet' type='text/css'>
<link href="/stylesheets/screen.css?1312949181" media="screen, projection" rel="stylesheet" type="text/css" />
<script src="/javascripts/head.min.js?1312911996" type="text/javascript"></script>
<script type="text/javascript">head.js( { 'jquery': 'https://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js' }, { 'jquery-ui': 'https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.11/jquery-ui.min.js' }, { 'rails': '/javascripts/rails.js?1312911996' }, { 'jquery.ezCookie_0.7.01': '/javascripts/jquery.ezCookie_0.7.01.js?1312911996' }, { 'jquery.wiggle': '/javascripts/jquery.wiggle.min.js?1312911996' }, { 'docs': '/javascripts/docs.js?1312911996' }, { 'google_analytics': '/javascripts/google_analytics.js?1313000978' }, { 'jquery.ba-bbq': '/javascripts/jquery.ba-bbq.min.js?1312911996' }, { 'jquery.slideto': '/javascripts/jquery.slideto.min.js?1312911996' }, { 'application': '/javascripts/application.js?1312911996' } );</script>

</head>
<body>
<div id='header'>
<div class='container'>
<h1 id='logo'>
<a href="/">swagger</a>
</h1>
<ul id='nav'>
<li class="first odd"><a href="/" class="active">Home</a></li>
<li class="even"><a href="/spec">Specification</a></li>
<li class="odd"><a href="/downloads">Downloads</a></li>
<li class="last even"><a href="http://petstore.swagger.wordnik.com/">Demo &rarr;</a></li>
</ul>
</div>
</div>
<div id='content'>
<div class='container'>
<div class='main_column'>
<img alt="Swagger_screenshot" src="/images/swagger_screenshot.png?1312911996" />
</div>
<div class='sidebar'>
<h1>Document your API with Style</h1>
<p>
<b>
Swagger is a specification and complete framework implementation for describing,
producing, consuming, and visualizing RESTful web services.
</b>
The overarching goal
of Swagger is to enable client and documentation systems to update at the same
pace as the server.  The documentation of methods, parameters and models are
tightly integrated into the server code, allowing APIs to always stay in sync.
With Swagger, deploying managing, and using powerful APIs has never been easier.
</p>
<h2>Who is responsible for Swagger?</h2>
<p>
Both the specification and framework implementation are initiatives from Wordnik.
Swagger was developed for Wordnik's own use during the development of
<a href="http://developer.wordnik.com/docs">developer.wordnik.com</a>
and the underlying system.  Swagger development
began in early 2010—the framework being released is currently used by Wordnik’s
APIs, which power both internal and external API clients.
</p>
<h2>Why is Swagger useful?</h2>
<p>
The Swagger framework simultaneously solves server, client, and documentation/sandbox
needs.  As a specification, it is language-agnostic.  It also provides a long runway
into new technologies and protocols beyond REST.
</p>
<p>
With Swagger's declarative resource specification, clients can understand and consume
services without knowledge of server implementation or access to the server code.
The Swagger UI framework allows both developers and non-developers to interact with
the API in a sandbox UI that gives clear insight into how the API responds to
parameters and options.
</p>
<p>
Swagger happily speaks both JSON and XML, with additional formats in the works.
</p>
<h2>How is Swagger implemented?</h2>
<p>
As a specification, Swagger is language-agnostic.  But since a spec without a usable
implementation has limited immediate value, Wordnik has released Swagger
implementations in Scala, Java, and HTML5.  Client generators are currently
available for Scala, Java, Javascript, Ruby, PHP, and Actionscript 3.  More client
support is underway.
</p>
<h2>What is Swagger not trying to solve?</h2>
<p>
Swagger does not currently include a suggestion for supporting multiple API versions
from a client or server point of view—versioning information (both of the spec and
the underlying API implementation) are declared.
</p>
<p>
It does not tell you how to write your APIs.  For example you can choose to delete
an object from your system either by an HTTP delete operation or via HTTP GET
with query param.  While being a good, RESTful citizen is encouraged (and rewarded
by an effective API sandbox client), it is not a prerequisite to use Swagger.
</p>
<p>
Swagger is not trying to solve all problems for all APIs—there will be use-cases
that fall outside of the Swagger specification.  For this reason, Swagger is an
improvement on existing specs like WSDL 2.0 and WADL which must support legacy
systems in order to be generally accepted.
</p>
</div>

</div>
</div>
<div id='footer'>
<div class='container'>
<ul>
<li><a href="http://www.wordnik.com" class="wordnik">wordnik.com</a></li>
<li><a href="http://twitter.com/swagger_doc" class="twitter">swagger_doc</a></li>
<li><a href="http://twitter.com/wordnikapi" class="twitter">wordnikapi</a></li>
<li><a href="http://twitter.com/wordnik" class="twitter">wordnik</a></li>
</ul>
</div>
</div>
</body>
</html>
