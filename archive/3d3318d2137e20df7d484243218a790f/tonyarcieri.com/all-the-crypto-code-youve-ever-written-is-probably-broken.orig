<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <script>var _sf_startpt=(new Date()).getTime()</script>
  <title>All the crypto code you&rsquo;ve ever written is probably broken | Tony Arcieri</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="generator" content="Svbtle.com" />
  <meta name="description" content="tl;dr: use authenticated encryption. use authenticated encryption. use authenticated encryption. use authenticated encryption. use authenticated encryption. use authenticated encryption. use authenticated encryption. use authenticated encryptio... | Hi there. I created Celluloid and I think it&#x27;s a pretty neat approach to both multicore concurrency and distributed programming.&nbsp;&#8226;&nbsp;Tony Arcieri&rsquo;s blog"/>
  <link rel="alternate" type="application/rss+xml" href="http://tonyarcieri.com/feed" />
  <link href="https://d1yg14i6wd46hx.cloudfront.net/cargo/build.blog-0c42309cefb769034f101f0268ae9693.css" media="screen" rel="stylesheet" type="text/css" />
  <style>blockquote {border-color: #C0362C;}aside#logo,aside#logo div a,ul#user_meta a:hover span.link_logo_inside,ul#user_meta a:hover span.link_logo,aside.kudo.complete span.circle {background-color: #C0362C;}aside#logo div a,aside.kudo.complete span.circle {background-image: url(//d1jcp5e5r52ocf.cloudfront.net/internet_large.png);}section.preview header#begin h2,ul#user_meta a:hover,nav.pagination span.next a,nav.pagination span.prev a {color: #C0362C;}ul#user_meta a:hover,nav.pagination span.next a,nav.pagination span.prev a {border-color: #C0362C;}</style>
  <script data-cfasync="false" src="//use.typekit.com/dlg5xuw.js"></script>
  <script data-cfasync="false">
  try{Typekit.load();}catch(e){} // GA << ANALYTICS
  var _gaq = _gaq || []; _gaq.push( ['_setAccount', 'UA-28994039-1'],['_setDomainName', 'none'],['_setAllowLinker', true],['_setUsername', 'bascule'],['_trackPageview'],['b._setAccount', 'UA-34484635-1'],['b._setDomainName', 'tonyarcieri.com'],['b._setAllowLinker', true],['b._trackPageview']);(function() { var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);})();
  </script>
</head>
<body class="bascule">
  <header id="sidebar">
  <aside id="logo" class="clearfix">
    <div class="clearfix">
      <a href="http://tonyarcieri.com">bascule</a>
    </div>
  </aside>
  <ul id="user_meta">
    <li class="blog_name">  
      <h1 id="blog_name">
        <a href="http://tonyarcieri.com">bascule</a>
      </h1>
    </li>
    <li class="blog_owner">  
      <h2 id="blog_owner">
        <a href="http://tonyarcieri.com">Tony Arcieri</a>
      </h2>
    </li>
    <li class="tagline">
      <h2 id="tagline">
        Hi there. I created Celluloid and I think it&rsquo;s a pretty neat approach to both multicore concurrency and distributed programming.
      </h2>
    </li>
    <li class="link twitter">
      <a href="http://twitter.com/bascule">
        @bascule
      </a>
    </li>
    <li class="link feed">
      <a href="http://tonyarcieri.com/feed">
        feed
      </a>
    </li>
  </ul>
  <aside id="svbtle_linkback">
    <a href="https://svbtle.com">
      <span class="logo_square"><span class="logo_circle">&nbsp;</span></span>&nbsp;<span class="svbtle">Svbtle</span>
    </a>
  </aside>
</header>
<section id="river">
  <header id="begin">
    <time datetime="2012-11-12" id="top_time">November 12, 2012</time>
  </header>
  <article id="eidwZXIRnOuzrzjU0w6hJ52s92szaDPqvYSwdXMAaX" class="post">
  <h2>
    <a href="/all-the-crypto-code-youve-ever-written-is-probably-broken" class="no-link title">All the crypto code you&rsquo;ve ever written is probably broken</a>
  </h2>
  <p>tl;dr: use authenticated encryption. use authenticated encryption. use authenticated encryption. use authenticated encryption. use authenticated encryption. use authenticated encryption. use authenticated encryption. use authenticated encryption. use authenticated encryption. use authenticated encryption. </p>

<p><a href="https://plus.google.com/108313527900507320366/posts/cMng6kChAAW">Do you keep up on the latest proceedings of the IACR CRYPTO conference</a>? No? Then chances are whenever you have tried to use a cryptographic library you made some sort of catastrophic mistake which would lead to a complete loss of confidentiality of the data you&rsquo;re trying to keep secret.</p>

<p>The most important question is: are you using an authenticated encryption mode? If you don&rsquo;t know what authenticated encryption is, then you&rsquo;ve probably already made a mistake. Here&rsquo;s a hint: authenticated encryption has nothing to do with authenticating users into a webapp. It has everything to do with ensuring the <em>integrity</em> of your data hasn&rsquo;t been compromised, i.e. no one has tampered with the message.</p>

<p>Why is authenticated encryption so poorly known despite being so important? I don&rsquo;t know. Perhaps it&rsquo;s because the need for it wasn&rsquo;t <a href="http://cseweb.ucsd.edu/%7Emihir/papers/oem.html">formally proven until the year 2000</a>. And chances are you&rsquo;ve never heard of authenticated encryption at all, because despite the best efforts of the cryptographic community it remains a relatively poorly-known concept.</p>

<p>Most of the cryptographic APIs you&rsquo;ve ever encountered have probably made you run a gambit of choices for how you want to encrypt data. You might think AES-256 is the way to go, but by default your crypto API might select ECB mode, which is so bad and terribly insecure it isn&rsquo;t even worth talking about. Perhaps you select CBC or CTR mode, but your crypto API doesn&rsquo;t make you specify a random IV and will always encrypt everything with an IV of all zeroes, which if you ever reuse the same key will compromise the confidentiality of your data.</p>

<p>Let&rsquo;s say you&rsquo;ve gotten through all of that and are now using something like AES-CTR mode with a random IV per message. Great. Do you think you&rsquo;re secure now? Probably not. A sophisticated attacker might attempt a man-in-the-middle attack, which gives him the ability to execute &ldquo;chosen ciphertext&rdquo; attacks (CCAs). To defend against these you must also ensure the <em>integrity</em> of your data, or otherwise confidentiality might be lost.</p>

<p>You may have learned you need to use a <a href="http://en.wikipedia.org/wiki/Message_authentication_code">MAC</a> to do this (and if you didn&rsquo;t you&rsquo;re most likely insecure!). You may have selected <a href="http://en.wikipedia.org/wiki/Hash-based_message_authentication_code">HMAC</a> for this purpose. But you&rsquo;re still left with three options here! Do you compute the MAC of the plaintext or the ciphertext. If you compute the MAC of the plaintext, do you encrypt it along with the plaintext, or do you append it to the end of the ciphertext? Or to spell it out more precisely, which of the following do you do?</p>

<ul>
<li><strong>Encrypt and MAC</strong>: encrypt the plaintext, compute the MAC of the plaintext, and append the MAC of the pltaintext to the ciphertext</li>
<li><strong>Encrypt then MAC</strong>: encrypt the plaintext, compute the MAC of the ciphertext, and append the MAC of the ciphertext to the ciphertext</li>
<li><strong>MAC then Encrypt</strong>: MAC the plaintext, append the MAC to the plaintext, then encrypt the plaintext and the MAC</li>
</ul>

<p>If you have answered any of the above questions incorrectly (the correct answer to the above question is &ldquo;encrypt then MAC&rdquo;) you&rsquo;ve quite likely created an insecure cryptographic scheme. Unless you really know what you&rsquo;re doing and can answer all these questions correctly (and even then!), you probably shouldn&rsquo;t be trying to build your own cipher/MAC constructions and should defer to cryptographic experts who specialize in that sort of thing. These cipher/MAC constructions are called authenticated encryption modes.</p>

<p>If you find yourself reaching for any form of encryption that isn&rsquo;t an authenticated encryption mode, you&rsquo;re probably doing it wrong. You shouldn&rsquo;t ever be choosing between CBC or CFB or CTR (or god forbid ECB). Unless you&rsquo;re a cryptographer, these should be considered dangerous low-level primitives not for the consumption of mere mortals.</p>

<p>That said, what modes should you be using?</p>

<ul>
<li><p><strong><a href="http://en.wikipedia.org/wiki/AEAD_block_cipher_modes_of_operation">NIST-approved AEAD block ciphers</a></strong>: AEAD stands for Authenticated Encryption with Associated Data, and represent ciphers that simultaneously provide confidentiality and integrity of data. Examples of these ciphers include <strong><a href="http://en.wikipedia.org/wiki/EAX_mode">EAX</a></strong>, <strong>GCM</strong>, and <strong>CCM</strong> modes.</p></li>
<li><p><strong>djb&rsquo;s authenticated encryption modes in NaCl</strong>: there are two authenticated encryption modes available in the <a href="http://nacl.cr.yp.to/">Networking and Cryptography library</a> by <a href="https://twitter.com/hashbreaker">Daniel J. Bernstein</a>: <strong><a href="http://nacl.cr.yp.to/secretbox.html">crypto_secretbox</a></strong> and <strong><a href="http://nacl.cr.yp.to/box.html">crypto_box</a></strong>, which respectively provide symmetric and pubkey modes of encryption and integrity checking.</p></li>
</ul>

<p>EAX is one of the recommended modes and is relatively easy to understand: it&rsquo;s a combination of AES-CTR mode and <a href="http://www.nuee.nagoya-u.ac.jp/labs/tiwata/omac/omac.html">CMAC (a.k.a. OMAC1)</a> which is a MAC derived from a block cipher (in this case AES). While EAX mode is relatively simple to understand and you may be tempted to implement it yourself it if it&rsquo;s unavailable in your language environment, you probably shouldn&rsquo;t, as there are a number of potential pitfalls that await you and unless you know what you&rsquo;re doing (and even then!) you&rsquo;re likely to get it wrong.</p>

<p>If I&rsquo;ve scared you enough by now, you my be googling around to discover if there&rsquo;s an implementation of any of the above modes in your respective programming language environment, and sadly in many language environments you may turn up empty. In these cases, there&rsquo;s not much you can do except petition your language maintainers who specialize in cryptography to expose APIs to authenticated encryption modes.</p>

<p>Authenticated encryption is something you should use as a complete package, implemented as a single unit by a well-reputed open source cryptographic library and not assembled piecemeal by people who do not specialize in cryptography.</p>

<p>Bottom line: unless you&rsquo;re using authenticated encryption, you are opening yourself up to all sorts of attacks you can&rsquo;t even anticipate, and shouldn&rsquo;t consider the data you&rsquo;re storing confidential.</p>

<p><em>Edit: several people have asked about more information on everything I&rsquo;ve described here, most notably why various MACing schemes are secure or insecure. If you are really interested in this topic, I strongly recommend you take the <a href="http://crypto-class.org">Stanford Crypto class on Coursera</a> which is what inspired me to write this blog post to begin with.</em></p>

  <aside class="kudo kudoable" id="kudo_eidwZXIRnOuzrzjU0w6hJ52s92szaDPqvYSwdXMAaX">
    <a href="#kudo" class="kudobject">
      <div class="opening clearfix">
        <span class="circle">&nbsp;</span>
      </div>
    </a>
    <a href="#kudo" class="counter">
      <span class="num">930</span>
      <span class="txt">Kudos</span>
    </a>
  </aside>
</article> 
  <nav class="pagination">
    <span class="prev">
      <a href="http://tonyarcieri.com" class="back_to_blog">&larr;&nbsp;&nbsp;&nbsp;Read more</a>
    </span>
  </nav>
</section>
  <script data-cfasync="false" src="//ajax.googleapis.com/ajax/libs/jquery/1.8.0/jquery.min.js"></script>
  <script src="https://d1yg14i6wd46hx.cloudfront.net/cargo/build.blog-39f263190266b3ba8313fd52b025e6f1.js" type="text/javascript"></script>
  <script type='text/javascript'>var _sf_async_config={};_sf_async_config.uid = 1721;_sf_async_config.domain = 'svbtle.com';_sf_async_config.sections = 'Tech';_sf_async_config.authors = 'Svbtle Authors';(function(){function loadChartbeat() {window._sf_endpt=(new Date()).getTime();var e = document.createElement('script');e.setAttribute('language', 'javascript');e.setAttribute('type', 'text/javascript');e.setAttribute('src',(('https:' == document.location.protocol) ? 'https://a248.e.akamai.net/chartbeat.download.akamai.com/102508/' : 'http://static.chartbeat.com/')+'js/chartbeat.js');document.body.appendChild(e);}var oldonload = window.onload;window.onload = (typeof window.onload != 'function') ? loadChartbeat : function() { oldonload(); loadChartbeat(); };})();</script>
</body>
</html>