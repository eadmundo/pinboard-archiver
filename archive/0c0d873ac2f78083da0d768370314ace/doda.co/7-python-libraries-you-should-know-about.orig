<!DOCTYPE html>
<html lang="en">
<head>
        <title>7 Python Libraries you should know about</title>
        <meta charset="utf-8" />
        <link rel="stylesheet" href="./theme/css/main.css" type="text/css" />
        
        <link href="/feeds/all.atom.xml" type="application/atom+xml" rel="alternate" title="Dominik Dabrowski Atom Feed" />
        
        

        <!--[if IE]>
                <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script><![endif]-->

        <!--[if lte IE 7]>
                <link rel="stylesheet" type="text/css" media="all" href="./css/ie.css"/>
                <script src="./js/IE8.js" type="text/javascript"></script><![endif]-->

        <!--[if lt IE 7]>
                <link rel="stylesheet" type="text/css" media="all" href="./css/ie6.css"/><![endif]-->

</head>

<body id="index" class="home">

        <header id="banner" class="body">
                <h1><a href=".">Dominik Dabrowski </a></h1>
                <nav><ul>
                
                
                
                
                    <li><a href="./about">About</a></li><li>&nbsp;&middot;&nbsp;</li>
                
                
                
                    <li><a href="./projects">Projects</a></li>
                
                
                
                <!--
                    <li class="active"><a href="./category/Blog">Blog</a></li>
                -->
                </ul></nav>
        </header><!-- /#banner -->
        
<section id="content" class="body">
  <article>
    <header>
      <h1 class="entry-title">
        <a href="7-python-libraries-you-should-know-about" rel="bookmark"
           title="Permalink to 7 Python Libraries you should know about">7 Python Libraries you should know about</a></h1>
      
    </header>

    <div class="entry-content">
      <footer class="post-info">
        <abbr class="published" title="2012-11-15T18:26:56.985674">
                Thu 15 November 2012
        </abbr>

        
        <address class="vcard author">
                By <a class="url fn" href="./author/Dominik Dabrowski">Dominik Dabrowski</a>
        </address>
        
<p>In <a href="./category/Blog">Blog</a>. </p>



</footer><!-- /.post-info -->
      <p>In my years of programming in Python and roaming around GitHub's Explore section, I've come across a few libraries that stood out to me as being particularly enjoyable to use. This blog post is an effort to further spread that knowledge.</p>
<p>I specifically excluded awesome libs like <tt class="docutils literal">requests</tt>, <tt class="docutils literal">SQLAlchemy</tt>, <tt class="docutils literal">Flask</tt>, <tt class="docutils literal">fabric</tt> etc. because I think they're already pretty &quot;main-stream&quot;. If you know what you're trying to do, it's almost guaranteed that you'll stumble over the aforementioned. This is a list of libraries that in my opinion <strong>should</strong> be better known, but aren't.</p>
<div class="section" id="pyquery-with-lxml">
<h2>1. <a class="reference external" href="http://packages.python.org/pyquery/">pyquery</a> (with lxml)</h2>
<div class="section" id="pip-install-pyquery">
<h3><tt class="docutils literal">pip install pyquery</tt></h3>
<p>For parsing HTML in Python, <a class="reference external" href="http://www.crummy.com/software/BeautifulSoup/">Beautiful Soup</a> is oft recommended and it does a great job. It sports a good pythonic API and it's easy to find introductory guides on the web. All is good in parsing-land .. until you want to parse more than a dozen documents at a time and immediately run head-first into performance problems. It's - simply put - very, very slow.</p>
<p>Just how slow? Check out this chart from the <a class="reference external" href="http://blog.ianbicking.org/2008/03/30/python-html-parser-performance/">excellent Python HTML Parser comparison</a> Ian Bicking compiled in 2008:</p>
<img alt="http://blog.ianbicking.org/wp-content/uploads/images/parsing-results.png" src="http://blog.ianbicking.org/wp-content/uploads/images/parsing-results.png" />
<p>What immediately stands out is how fast lxml is. Compared to Beautiful Soup, the lxml docs are pretty sparse and that's what originally kept me from adopting this mustang of a parsing library. lxml is pretty clunky to use. Yeah you can learn and use <tt class="docutils literal">Xpath</tt> or <tt class="docutils literal">cssselect</tt> to select specific elements out of the tree and it becomes kind of tolerable. But once you've selected the elements that you actually want to get, you have to navigate the labyrinth of attributes lxml exposes, some containing the bits you want to get at, but the vast majority just returning <tt class="docutils literal">None</tt>. This becomes easier after a couple dozen uses but it remains unintuitive.</p>
<p>So either <strong>slow and easy to use</strong> or <strong>fast and hard to use</strong>, right?</p>
<p>Wrong!</p>
<p><strong>Enter PyQuery</strong></p>
<p>Oh PyQuery you beautiful seductress:</p>
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">pyquery</span> <span class="kn">import</span> <span class="n">PyQuery</span>
<span class="n">page</span> <span class="o">=</span> <span class="n">PyQuery</span><span class="p">(</span><span class="n">some_html</span><span class="p">)</span>

<span class="n">last_red_anchor</span> <span class="o">=</span> <span class="n">page</span><span class="p">(</span><span class="s">&#39;#container &gt; a.red:last&#39;</span><span class="p">)</span>
</pre></div>
<p>Easy as pie. It's <a class="reference external" href="http://i.imgur.com/FFHWU.gif">ever-beloved</a> jQuery but in Python!</p>
<p>There are some gotchas, like for example that PyQuery, like jQuery, exposes its internals upon iteration, forcing you to re-wrap:</p>
<div class="highlight"><pre><span class="k">for</span> <span class="n">paragraph</span> <span class="ow">in</span> <span class="n">page</span><span class="p">(</span><span class="s">&#39;#container &gt; p&#39;</span><span class="p">):</span>
    <span class="n">paragraph</span> <span class="o">=</span> <span class="n">PyQuery</span><span class="p">(</span><span class="n">paragraph</span><span class="p">)</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">paragraph</span><span class="o">.</span><span class="n">text</span><span class="p">()</span>
</pre></div>
<p>That's a wart the PyQuery creators ported over from jQuery (where they'd fix it if it didn't break compatability). Understandable but still unfortunate for such a great library.</p>
</div>
</div>
<div class="section" id="dateutil">
<h2>2. <a class="reference external" href="http://labix.org/python-dateutil">dateutil</a></h2>
<div class="section" id="pip-install-python-dateutil">
<h3><tt class="docutils literal">pip install <span class="pre">python-dateutil</span></tt></h3>
<p>Handling dates is a pain. Thank god <tt class="docutils literal">dateutil</tt> exists. I won't even go near parsing dates without trying <tt class="docutils literal">dateutil.parser</tt> first:</p>
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">dateutil.parser</span> <span class="kn">import</span> <span class="n">parse</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">parse</span><span class="p">(</span><span class="s">&#39;Mon, 11 Jul 2011 10:01:56 +0200 (CEST)&#39;</span><span class="p">)</span>
<span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2011</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">tzlocal</span><span class="p">())</span>

<span class="c"># fuzzy ignores unknown tokens</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;Today is 25 of September of 2003, exactly</span>
<span class="s">...        at 10:49:41 with timezone -03:00.&quot;&quot;&quot;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">parse</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">fuzzy</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2003</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span>
                  <span class="n">tzinfo</span><span class="o">=</span><span class="n">tzoffset</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="o">-</span><span class="mi">10800</span><span class="p">))</span>
</pre></div>
<p>Another thing that <tt class="docutils literal">dateutil</tt> does for you, that would be a total pain to do manually, is recurrence:</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="n">rrule</span><span class="p">(</span><span class="n">DAILY</span><span class="p">,</span> <span class="n">count</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">byweekday</span><span class="o">=</span><span class="p">(</span><span class="n">TU</span><span class="p">,</span><span class="n">TH</span><span class="p">),</span>
<span class="o">...</span>            <span class="n">dtstart</span><span class="o">=</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2007</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)))</span>
<span class="p">[</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2007</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
 <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2007</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
 <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2007</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]</span>
</pre></div>
</div>
</div>
<div class="section" id="fuzzywuzzy">
<h2>3. <a class="reference external" href="https://github.com/seatgeek/fuzzywuzzy">fuzzywuzzy</a></h2>
<div class="section" id="pip-install-fuzzywuzzy">
<h3><tt class="docutils literal">pip install fuzzywuzzy</tt></h3>
<p><tt class="docutils literal">fuzzywuzzy</tt> allows you to do fuzzy comparison on <span class="strike">wuzzes</span> strings. This has a whole host of use cases and is especially nice when you have to deal with human-generated data.</p>
<p>Consider the following code that uses the <a class="reference external" href="http://en.wikipedia.org/wiki/Levenshtein_distance">Levenshtein distance</a>  comparing some <tt class="docutils literal">user input</tt> to an array of possible choices.</p>
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">Levenshtein</span> <span class="kn">import</span> <span class="n">distance</span>

<span class="n">countries</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;Canada&#39;</span><span class="p">,</span> <span class="s">&#39;Antarctica&#39;</span><span class="p">,</span> <span class="s">&#39;Togo&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">choose_least_distant</span><span class="p">(</span><span class="n">element</span><span class="p">,</span> <span class="n">choices</span><span class="p">):</span>
    <span class="s">&#39;Return the one element of choices that is most similar to element&#39;</span>
    <span class="k">return</span> <span class="nb">min</span><span class="p">(</span><span class="n">choices</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">s</span><span class="p">:</span> <span class="n">distance</span><span class="p">(</span><span class="n">element</span><span class="p">,</span> <span class="n">s</span><span class="p">))</span>

<span class="n">user_input</span> <span class="o">=</span> <span class="s">&#39;canaderp&#39;</span>
<span class="n">choose_least_distant</span><span class="p">(</span><span class="n">user_input</span><span class="p">,</span> <span class="n">countries</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="s">&#39;Canada&#39;</span>
</pre></div>
<p>This is all nice and dandy but we can do better. The ocean of 3rd party libs in Python is so vast, that in most cases we can just <tt class="docutils literal">import</tt> something and be on our way:</p>
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">fuzzywuzzy</span> <span class="kn">import</span> <span class="n">process</span>

<span class="n">process</span><span class="o">.</span><span class="n">extractOne</span><span class="p">(</span><span class="s">&quot;canaderp&quot;</span><span class="p">,</span> <span class="n">countries</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="p">(</span><span class="s">&quot;Canada&quot;</span><span class="p">,</span> <span class="mi">97</span><span class="p">)</span>
</pre></div>
<p>More has been written about fuzzywuzzy <a class="reference external" href="http://seatgeek.com/blog/dev/fuzzywuzzy-fuzzy-string-matching-in-python">here</a>.</p>
</div>
</div>
<div class="section" id="watchdog">
<h2>4. <a class="reference external" href="http://packages.python.org/watchdog/">watchdog</a></h2>
<div class="section" id="pip-install-watchdog">
<h3><tt class="docutils literal">pip install watchdog</tt></h3>
<p><tt class="docutils literal">watchdog</tt> is a Python API and shell utilities to monitor file system events. This means you can watch some directory and define a &quot;push-based&quot; system. Watchdog supports all kinds of problems. A solid piece of engineering that does it much better than the 5 or so libraries I tried before finding out about it.</p>
</div>
</div>
<div class="section" id="sh">
<h2>5. <a class="reference external" href="http://amoffat.github.com/sh/">sh</a></h2>
<div class="section" id="pip-install-sh">
<h3><tt class="docutils literal">pip install sh</tt></h3>
<p><tt class="docutils literal">sh</tt> allows you to call any program as if it were a function:</p>
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">sh</span> <span class="kn">import</span> <span class="n">git</span><span class="p">,</span> <span class="n">ls</span><span class="p">,</span> <span class="n">wc</span>

<span class="c"># checkout master branch</span>
<span class="n">git</span><span class="p">(</span><span class="n">checkout</span><span class="o">=</span><span class="s">&quot;master&quot;</span><span class="p">)</span>

<span class="c"># print(the contents of this directory</span>
<span class="k">print</span><span class="p">(</span><span class="n">ls</span><span class="p">(</span><span class="s">&quot;-l&quot;</span><span class="p">))</span>

<span class="c"># get the longest line of this file</span>
<span class="n">longest_line</span> <span class="o">=</span> <span class="n">wc</span><span class="p">(</span><span class="n">__file__</span><span class="p">,</span> <span class="s">&quot;-L&quot;</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="pattern">
<h2>6. <a class="reference external" href="https://github.com/clips/pattern">pattern</a></h2>
<div class="section" id="pip-install-pattern">
<h3><tt class="docutils literal">pip install pattern</tt></h3>
<p>This behemoth of a library advertises itself quite modestly:</p>
<blockquote>
Pattern is a web mining module for the Python programming language.</blockquote>
<p>... that does <strong>Data Mining</strong>, <strong>Natural Language Processing</strong>, <strong>Machine Learning</strong> and <strong>Network Analysis</strong> all in one. I myself yet have to play with it but a friend's verdict was very positive.</p>
</div>
</div>
<div class="section" id="path-py">
<h2>7. <a class="reference external" href="http://pypi.python.org/pypi/path.py">path.py</a></h2>
<div class="section" id="pip-install-path-py">
<h3><tt class="docutils literal">pip install path.py</tt></h3>
<p>When I first learned Python <tt class="docutils literal">os.path</tt> was my least favorite part
of the stdlib.</p>
<p>Even something as simple as creating a list of files in a directory turned out to be grating:</p>
<div class="highlight"><pre><span class="kn">import</span> <span class="nn">os</span>

<span class="n">some_dir</span> <span class="o">=</span> <span class="s">&#39;/some_dir&#39;</span>
<span class="n">files</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">some_dir</span><span class="p">):</span>
    <span class="n">files</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">joinpath</span><span class="p">(</span><span class="n">some_dir</span><span class="p">,</span> <span class="n">f</span><span class="p">))</span>
</pre></div>
<p>That <tt class="docutils literal">listdir</tt> is in <tt class="docutils literal">os</tt> and not <tt class="docutils literal">os.path</tt> is unfortunate and unexpected and one would really hope for more from such a prominent module. And then all this manual fiddling for what really should be as simple as possible.</p>
<p>But with the power of <tt class="docutils literal">path</tt>, handling file paths becomes fun again:</p>
<div class="highlight"><pre><span class="kn">from</span> <span class="nn">path</span> <span class="kn">import</span> <span class="n">path</span>

<span class="n">some_dir</span> <span class="o">=</span> <span class="n">path</span><span class="p">(</span><span class="s">&#39;/some_dir&#39;</span><span class="p">)</span>

<span class="n">files</span> <span class="o">=</span> <span class="n">some_dir</span><span class="o">.</span><span class="n">files</span><span class="p">()</span>
</pre></div>
<p>Done!</p>
<p>Other goodies include:</p>
<div class="highlight"><pre><span class="o">&gt;&gt;&gt;</span> <span class="n">path</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">owner</span>
<span class="s">&#39;root&#39;</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">path</span><span class="p">(</span><span class="s">&#39;a/b/c&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">splitall</span><span class="p">()</span>
<span class="p">[</span><span class="n">path</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">),</span> <span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">]</span>

<span class="c"># overriding __div__</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">path</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span> <span class="o">/</span> <span class="s">&#39;b&#39;</span> <span class="o">/</span> <span class="s">&#39;c&#39;</span>
<span class="n">path</span><span class="p">(</span><span class="s">&#39;a/b/c&#39;</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">path</span><span class="p">(</span><span class="s">&#39;ab/c&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">relpathto</span><span class="p">(</span><span class="s">&#39;ab/d/f&#39;</span><span class="p">)</span>
<span class="n">path</span><span class="p">(</span><span class="s">&#39;../d/f&#39;</span><span class="p">)</span>
</pre></div>
<p>Best part of it all? <tt class="docutils literal">path</tt> subclasses Python's <tt class="docutils literal">str</tt> so you can use it
completely guilt-free without constantly being forced to cast it to <tt class="docutils literal">str</tt>
and worrying about libraries that check <tt class="docutils literal">isinstance(s, basestring)</tt>
(or even worse <tt class="docutils literal">isinstance(s, str)</tt>).</p>
<hr class="docutils" />
<p><strong>That's it!</strong> I hope I was able to introduce you to some libraries you didn't know before.</p>
</div>
</div>

    </div><!-- /.entry-content -->
    

  </article>
</section>

        <section id="extras" class="body">
        
        
        </section><!-- /#extras -->
        
        <footer id="contentinfo" class="body">
                <address id="about" class="vcard body"><p>
                <!-- <img src="/theme/images/ava.jpeg" alt="avatar"> -->
                <img src="https://secure.gravatar.com/avatar/1cb79af142957037e6813309ed9d4322?s=104" alt="avatar">
                I’m Dominik. I love building software and I love making it fast. I recently graduated from NYC's <a href="https://www.hackerschool.com">Hacker School</a> and am now looking for a job in Europe (especially London). If you'd like to talk, <a href="mailto:dominik@doda.co?subject=hello">drop me a line</a>! My code lives on <a href="https://github.com/doda">GitHub</a>, you can also check out the <a href="/projects.html">projects</a> I'm working on or find out <a href="/about.html">more about me</a>.</p>
                </address><!-- /#about -->

        </footer><!-- /#contentinfo -->
        


    <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-35914379-1']);
    _gaq.push(['_trackPageview']);
    (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
    </script>



</body>
</html>